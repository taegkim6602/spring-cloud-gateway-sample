spring:
  application:
    name: ${SPRING_APPLICATION_NAME:gateway-service}
  cloud:
    gateway:
      metrics:
        enabled: true
        tags:
          instance-id: ${SPRING_APPLICATION_NAME:gateway-service}
          route-id-enabled: true
      observability:
        enabled: true
      routes:
        - id: data_go_kr_route
          uri: http://apis.data.go.kr
          predicates:
            - Path=/data_get
          filters:
            - RewritePath=/data_get, /1140100/minAnalsInfoView5/minRisingKeyword5?serviceKey=o2wYi7NZQjx%2BHkz6KAjGqQHofPOWE8jyiwDVwcUeSMJveQMEMFGtVbTJpneZpXVFLJG2conCgcN%2FXEiYG2ejRw%3D%3D&dataType=json&analysisTime=2021050614&maxResult=10&target=pttn,dfpt,saeol&mainSubCode=1140100
        - id: example_route
          uri: http://httpbin.org:80
          predicates:
            - Path=/get
        - id: postman_echo_route
          uri: https://postman-echo.com
          predicates:
            - Path=/postman-echo/get
          filters:
            - StripPrefix=1
        - id: reqres_route
          uri: https://reqres.in
          predicates:
            - Path=/reqres/users/{id}
          filters:
            - StripPrefix=1
            - RewritePath=/users/(?<id>.*), /api/users/${id}
        - id: test_route
          uri: https://jsonplaceholder.typicode.com
          predicates:
            - Path=/test/**
          filters:
            - RewritePath=/test/(?<segment>.*), /${segment}

  datasource:
    url: jdbc:postgresql://${SPRING_DATASOURCE_HOST:localhost}:${SPRING_DATASOURCE_PORT:5432}/${SPRING_DATASOURCE_DB:routingdb}
    username: ${SPRING_DATASOURCE_USERNAME:admin}
    password: ${SPRING_DATASOURCE_PASSWORD:secret123}
    driver-class-name: org.postgresql.Driver
  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    hibernate:
      ddl-auto: none
    show-sql: true
    properties:
      hibernate:
        format_sql: true

  redis:
    host: ${SPRING_REDIS_HOST:localhost}
    port: ${SPRING_REDIS_PORT:6379}
    password: ${SPRING_REDIS_PASSWORD:1234}
    timeout: 2000
    lettuce:
      pool:
        max-active: 8
        max-idle: 8
        min-idle: 2
        max-wait: -1ms
    connect-timeout: 5000
    cache:
      time-to-live: 3600
      enable-warm-up: true
      warm-up-retry-count: 3
      warm-up-retry-delay: 5000
      cache-prefix: "route:"
      lock-key: "cache_warming_lock"
      lock-timeout: 30000
      batch-size: 1000
      health-check-interval: 300000 # 5 minutes
      expiration-warning-threshold: 300

server:
  port: ${SERVER_PORT:8080}

management:
  health:
    redis:
      enabled: false
    db:
      enabled: false
  endpoints:
    web:
      exposure:
        include: health,metrics,prometheus,gateway,logfile
  endpoint:
    health:
      show-details: always
    metrics:
      enabled: true
    prometheus:
      enabled: true
    logfile:
      enabled: true
    gateway:
      enabled: true
  metrics:
    tags:
      application: gateway-service
    distribution:
      percentiles-histogram:
        http.server.requests: true
    web:
      server:
        request:
          autotime:
            enabled: true
    export:
      prometheus:
        enabled: true
    enable:
      all: true

logging:
  file:
    name: log/spring-cloud-gateway.log
    max-size: 10MB
    max-history: 7
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} trace_id=%X{trace_id} span_id=%X{span_id} - %msg%n"
  level:
    root: INFO
    org.springframework.http.server.reactive: DEBUG
    org.springframework.web.reactive: DEBUG
    reactor.netty: DEBUG
    com.example: DEBUG
    org.springframework.cloud.gateway: TRACE
    org.springframework.cloud.gateway.route: TRACE
    org.springframework.cloud.gateway.handler.RoutePredicateHandlerMapping: TRACE
    org.springframework.web.server.handler.FilteringWebHandler: TRACE
    redis.clients: DEBUG
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE

