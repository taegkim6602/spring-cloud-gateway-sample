!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!Java	a,annotation	/annotation declarations/
!_TAG_KIND_DESCRIPTION!Java	c,class	/classes/
!_TAG_KIND_DESCRIPTION!Java	e,enumConstant	/enum constants/
!_TAG_KIND_DESCRIPTION!Java	f,field	/fields/
!_TAG_KIND_DESCRIPTION!Java	g,enum	/enum types/
!_TAG_KIND_DESCRIPTION!Java	i,interface	/interfaces/
!_TAG_KIND_DESCRIPTION!Java	m,method	/methods/
!_TAG_KIND_DESCRIPTION!Java	p,package	/packages/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!Java	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/Users/tg/projects/NIA/sample/fromBasic/spring-cloud-gateway-basic/src/main/java/com/example/demogateway/filters/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	//
!_TAG_ROLE_DESCRIPTION!Java!package	imported	/imported package/
TrafficMetricsFilter	TrafficMetricsFilter.java	/^    public TrafficMetricsFilter(MeterRegistry meterRegistry, PathNormalizer pathNormalizer) {$/;"	m	class:TrafficMetricsFilter
TrafficMetricsFilter	TrafficMetricsFilter.java	/^public class TrafficMetricsFilter implements GlobalFilter {$/;"	c
buildRequestTimer	TrafficMetricsFilter.java	/^    private Timer buildRequestTimer(String routeId, String method, String path, String status) {$/;"	m	class:TrafficMetricsFilter	file:
com.example.demogateway.filters	TrafficMetricsFilter.java	/^package com.example.demogateway.filters;$/;"	p
filter	TrafficMetricsFilter.java	/^    public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) {$/;"	m	class:TrafficMetricsFilter
logger	TrafficMetricsFilter.java	/^    private static final Logger logger = LoggerFactory.getLogger(TrafficMetricsFilter.class);$/;"	f	class:TrafficMetricsFilter	file:
meterRegistry	TrafficMetricsFilter.java	/^    private final MeterRegistry meterRegistry;$/;"	f	class:TrafficMetricsFilter	file:
pathNormalizer	TrafficMetricsFilter.java	/^    private final PathNormalizer pathNormalizer;$/;"	f	class:TrafficMetricsFilter	file:
percentiles	TrafficMetricsFilter.java	/^    private double[] percentiles;$/;"	f	class:TrafficMetricsFilter	file:
recordError	TrafficMetricsFilter.java	/^    private void recordError(ServerWebExchange exchange, Throwable throwable, String routeId) {$/;"	m	class:TrafficMetricsFilter	file:
recordMetrics	TrafficMetricsFilter.java	/^    private void recordMetrics(ServerWebExchange exchange, Instant startTime, $/;"	m	class:TrafficMetricsFilter	file:
slaBoundaries	TrafficMetricsFilter.java	/^    private double[] slaBoundaries;$/;"	f	class:TrafficMetricsFilter	file:
